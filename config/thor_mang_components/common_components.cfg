
network {
  udp_frame_size_bytes=1024;

  # Testing:
  # target_rate_bps=10000000; # set to 10Mbps (essentially non-restrictive) 
  # disable_pmd_custom_codecs = true;
  # disable_ers_custom_codecs = true;
  # disable_robot_plan_custom_codecs=true;

  #target_rate_bps=1000000; # set to 1Mbps (a little restrictive) 
  #disable_pmd_custom_codecs = false;
  #disable_ers_custom_codecs = true;
  #disable_robot_plan_custom_codecs= true;

  # Competition:
  target_rate_bps=95000; # set to 95kbps - competition (should be same as throughput_bps below for 250 ms latency case)
  fallback_seconds=50; # after these number of seconds at a rate other than the target_rate_bps (i.e. set adaptively for lower latency/higher throughput case), set back to target_rate_bps
  disallow_rate_change_seconds=15;

  disable_pmd_custom_codecs = false; #Procman custom compression
  disable_ers_custom_codecs = false; #EST_ROBOT_STATE custom compression
  disable_robot_plan_custom_codecs= false;

  latency=[50, 500];
  throughput_bps=[950000, 95000];

  expected_packet_loss_percent=5;

  robot {
      udp_host="172.19.5.2"; # Field Computer 1
      udp_port=9000;
  }
  base {
      udp_host="172.19.5.2"; # Main OCU
      udp_port=9001;
  }

  robot_to_base {
      ########################################
      channels_a=["CAMERA_LEFT_TX","CAMERA_RIGHT_TX",
                  "CAMERALHAND_LEFT_TX", "CAMERARHAND_LEFT_TX",
                  "CAMERACHEST_LEFT_TX", "CAMERACHEST_RIGHT_TX",  
                  "CAMERA_LEFT_SUB","CAMERACHEST_LEFT_SUB","CAMERACHEST_RIGHT_SUB",
                  "MAP_OCTREE","MAP_CLOUD","MAP_DEPTH", "OGG_SERVER",
                  "MAP_CATALOG","MAP_LOCAL_CORRECTION",
                  "SYSTEM_STATUS","POSE_TAG",
                  "AFFORDANCE_PLUS_BASE_OVERWRITE","PMD_PRINTF_REPLY"];
      frequency_a=0.0;
      buffer_size_a=1;
      priority_a=0;

      ########################################
      channels_b=["PMD_INFO2"];
      frequency_b=0.0;
      buffer_size_b=10;
      priority_b=0;

      ########################################
      channels_c=["FREQUENCY_LCM", "ATLAS_STATUS", "CONTROLLER_STATUS"];
      frequency_c=1.0;
      buffer_size_c=1;
      priority_c=0;

      ########################################
      channels_d=["EST_ROBOT_STATE"];
      frequency_d=4.0;
      buffer_size_d=1;
      priority_d=2;
    }

    base_to_robot {
      ########################################
      channels_a=["MAP_REQUEST","SENSOR_REQUEST","SUBIMAGE_REQUEST",
                  "CAMERA_SETTINGS","MAP_DEPTH_SETTINGS",
                  "COMMITTED_FOOTSTEP_PLAN","PMD_ORDERS","PMD_ORDERS2","DATA_REQUEST",
                  "COMMITTED_ROBOT_PLAN","COMMITTED_GRASP",
                  "AFFORDANCE_PLUS_BOT_OVERWRITE","GAZE_COMMAND",
                  "DESIRED_NECK_PITCH","SIMPLE_GRASP_COMMAND",
                  "COMMITTED_MANIP_GAIN","COMMITTED_POSTURE_PRESET",
                  "PMD_PRINTF_REQUEST", "COMMITTED_PLAN_PAUSE","RECOVERY_CMD",
                  "COMMITTED_EE_ADJUSTMENT", "CONTROLLER_MODE", "MAP_CONTROLLER_COMMAND",
                  "COMMITTED_MANIP_MAP","MOTIONEST_REQUEST", "STOP_WALKING",
                  "MULTISENSE_COMMAND", "MAP_REQUEST_BBOX",
                  "IROBOT_LEFT_SIMPLE_GRASP", "IROBOT_RIGHT_SIMPLE_GRASP", 
                  "SANDIA_LEFT_SIMPLE_GRASP", "SANDIA_RIGHT_SIMPLE_GRASP", 
                  "IROBOT_RIGHT_CALIBRATE", "IROBOT_RIGHT_SPREAD", 
                  "IROBOT_RIGHT_POSITION_CONTROL_CLOSE", "IROBOT_RIGHT_CURRENT_CONTROL_CLOSE",
                  "IROBOT_LEFT_CALIBRATE", "IROBOT_LEFT_SPREAD",
                  "IROBOT_LEFT_POSITION_CONTROL_CLOSE", "IROBOT_LEFT_CURRENT_CONTROL_CLOSE",
                  "ROBOTIQ_LEFT_COMMAND", "ROBOTIQ_RIGHT_COMMAND",
                  "OGG_CLIENT", "PLAN_USING_BDI_HEIGHT",
                  "ATLAS_BEHAVIOR_COMMAND", "ATLAS_MANIPULATE_PARAMS", 
                  "CALIBRATE_ARM_ENCODERS","RESET_DRIVER_SAFETY"];
      frequency_a=0.0;
      buffer_size_a=10;
      priority_a=1;

      ########################################
      # send this so there's some constant traffic for the robot
      # to estimate latency from
      channels_b=["BASE_UTIME"];
      frequency_b=1.0;
      buffer_size_b=1;
      priority_b=0;

      ########################################
      channels_c=[];
      frequency_c=[1.0];
      buffer_size_c=1;
      priority_c=0;

      ########################################
      channels_d=[];
      frequency_d=[1.0];
      buffer_size_d=1;
      priority_d=0;
    }  
}

frequency_tool {
    LCM { # must be caps | channels_short must be 4 chars
        #NBNBNB: dont change this list - its hard coded for easy transmission from robot to base
        channels       = ["EST_ROBOT_STATE","ATLAS_COMMAND","CAMERA","SCAN"];
        channels_short = ["ERS "           ,"ACOM"         ,"HEAD"  ,"SCAN"]; 
    }
}

driving {
    control {
        lookahead_distance_default = 11.0;
        kp_steer_default = 6.0;
    }
}

viewer {
  renderer_groups {
    manipulation {
      name="Manipulation";
      enabled=["BOT_FRAMES","Grid", "Maps", "Robot State Display","Robot Plan Display", "Data Control",
          "Affordances & StickyHands/Feet", "Collections" ];
    }

    walking {
      name="Walking";
      enabled=[ "BOT_FRAMES","Grid", "Maps", "Robot State Display","Robot Plan Display", "Data Control", "Walking",
          "Footstep Plans & Stick Feet" ];
    }
  }

  datacontrol_presets {

    all {
      label = "All";
      Camera_Head     { enable = 1;  period = 1;  quality = 1; }
      Camera_L_Chest  { enable = 1;  period = 1;  quality = 1; }
      Camera_R_Chest  { enable = 1;  period = 1;  quality = 1; }
      Scene_Height    { enable = 1;  period = 1; }
      Scene_Depth     { enable = 1;  period = 1; }
      Workspace_Depth { enable = 1;  period = 1;  fov = 90;  yaw = 0; }
    }

    camera_only {
      label = "Camera Only";
      Camera_Head     { enable = 1;  period = 1;  quality = 1; }
      Camera_L_Chest  { enable = 0;  period = 0;  quality = 1; }
      Camera_R_Chest  { enable = 0;  period = 0;  quality = 1; }
      Scene_Height    { enable = 0;  period = 0; }
      Scene_Depth     { enable = 0;  period = 0; }
      Workspace_Depth { enable = 0;  period = 0; }
    }

    camera_lidar {
      label = "Camera + Hi Lidar";
      Camera_Head     { enable = 1;  period = 1;  quality = 1; }
      Camera_L_Chest  { enable = 1;  period = 5;  quality = 1; }
      Camera_R_Chest  { enable = 1;  period = 5;  quality = 1; }
      Scene_Height    { enable = 0;  period = 0; }
      Scene_Depth     { enable = 0;  period = 0; }
      Workspace_Depth { enable = 1;  period = 1; }
    }

    camera_low_lidar {
      label = "Camera + Low Lidar";
      Camera_Head     { enable = 1;  period = 1;  quality = 1; }
      Camera_L_Chest  { enable = 1;  period = 5;  quality = 1; }
      Camera_R_Chest  { enable = 1;  period = 5;  quality = 1; }
      Scene_Height    { enable = 0;  period = 0; }
      Scene_Depth     { enable = 0;  period = 0; }
      Workspace_Depth { enable = 1;  period = 5; }
    }
  }
}


control{
  
  # Use these encoder offsets, updated after calibration
  # no need to include 16:27 here:
  # index 3 is the neck. 4.24 as of v.1.10 robot software
  encoder_offsets{
    active = "true";
    index = [3 , 22 , 23 , 24 , 25 , 26 , 27 , 16 , 17 , 18 , 19 , 20 , 21];
    value = [4.2400, 1.0778, 1.0625, 1.0393, 1.0747, -0.1802, 1.1070, -1.0556, -1.0612, -0.0304, -1.0619, -1.0700, 0.9813];
  }
  
  filtering{
    # for alpha filtering:
    # out = alpha*out_prev + (1-alpha)*new
    
    joints{
      # none, kalman, backlash
      type = "kalman";

      index = [0,1,2,4,5,6,7,8,9,10,11,12,13,14,15]; # back and legs
      #index = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]; # full robot

      # poorly tuned KF velocities, which work with control
      process_noise_pos = 0.01;
      process_noise_vel = 1e-5;
      observation_noise = 5e-4;

      # reasonable KF parameters that don't work with control
      #process_noise_pos = 0.02;
      #process_noise_vel = 0.001;
      #observation_noise = 0.0002; # lower tends output to observations

      # tuned backlash filter parameters
      #process_noise_pos = 0.02;
      #process_noise_vel = 0.0005;
      #observation_noise = 0.0002; # lower tends output to observations
      #backlash_alpha = 0.25; # alpha filter
      #backlash_crossing_time_max = 0.05; # expiry time of crossing fix (sec), IHMC said they used 30msec

      # Adjust the joint angles using the IHMC torque correction method
      torque_adjustment = true;
    }

    rotation_rate{
      # none, alpha
      type = "alpha";
      alpha = 0.95;
    }

  }
}

perception {

  # tag ids and locations relative to particular robot links
  fiducial_tags {

    # right arm, hand joint inner
    tag_001 {
      id = 1;
      link = "r_hand";
      xyzrpy = [-0.0686,-0.0009,0.0008, 0,-90,0];
    }

    # right arm, hand joint outer
    tag_002 {
      id = 2;
      link = "r_hand";
      xyzrpy = [0.0610,0.0034,-0.0004, 0,90,0];
    }

    # right arm, elbow y joint front
    tag_003 {
      id = 3;
      link = "r_farm";
      xyzrpy = [-0.0037,-0.0685,0.0201, 0,0,0];
    }

    # right arm, elbow y joint rear
    tag_004 {
      id = 4;
      link = "r_farm";
      xyzrpy = [-0.0047,-0.0712,-0.0257, 180,0,0];
    }
  }
}
